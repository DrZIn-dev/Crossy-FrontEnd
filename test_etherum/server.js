const Web3 = require("web3");
const EthereumTx = require("ethereumjs-tx").Transaction;

const rpcURL = "http://127.0.0.1:7545";
const web3 = new Web3(rpcURL);

let abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "string",
        name: "issuer",
        type: "string"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "string",
        name: "duration",
        type: "string"
      },
      {
        indexed: false,
        internalType: "string",
        name: "purchaseName",
        type: "string"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "purchaseAmount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "initialDate",
        type: "uint256"
      }
    ],
    name: "ContractCreated",
    type: "event"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "contracts",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "issuer",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "duration",
        type: "string"
      },
      {
        internalType: "string",
        name: "purchaseName",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "purchaseAmount",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "initialDate",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "string",
        name: "_issuer",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "_duration",
        type: "string"
      },
      {
        internalType: "string",
        name: "_purchase_name",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "_purchase_amount",
        type: "uint256"
      }
    ],
    name: "createContract",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      }
    ],
    name: "getContract",
    outputs: [
      {
        internalType: "string",
        name: "issuer",
        type: "string"
      },
      {
        internalType: "string",
        name: "purchaseName",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "purchaseAmount",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "initialDate",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
];
let bytecode =
  "0x60806040526000805534801561001457600080fd5b50610ddd806100246000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306661abd14610051578063474da79a1461006f5780636ebc8c861461020a5780639e13de331461039e575b600080fd5b6100596105af565b6040518082815260200191505060405180910390f35b61009b6004803603602081101561008557600080fd5b81019080803590602001909291905050506105b5565b6040518088815260200180602001878152602001806020018060200186815260200185815260200184810384528a818151815260200191508051906020019080838360005b838110156100fb5780820151818401526020810190506100e0565b50505050905090810190601f1680156101285780820380516001836020036101000a031916815260200191505b50848103835288818151815260200191508051906020019080838360005b83811015610161578082015181840152602081019050610146565b50505050905090810190601f16801561018e5780820380516001836020036101000a031916815260200191505b50848103825287818151815260200191508051906020019080838360005b838110156101c75780820151818401526020810190506101ac565b50505050905090810190601f1680156101f45780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b6102366004803603602081101561022057600080fd5b81019080803590602001909291905050506107bf565b6040518080602001806020018781526020018060200186815260200185815260200184810384528a818151815260200191508051906020019080838360005b83811015610290578082015181840152602081019050610275565b50505050905090810190601f1680156102bd5780820380516001836020036101000a031916815260200191505b50848103835289818151815260200191508051906020019080838360005b838110156102f65780820151818401526020810190506102db565b50505050905090810190601f1680156103235780820380516001836020036101000a031916815260200191505b50848103825287818151815260200191508051906020019080838360005b8381101561035c578082015181840152602081019050610341565b50505050905090810190601f1680156103895780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b610599600480360360a08110156103b457600080fd5b81019080803590602001906401000000008111156103d157600080fd5b8201836020820111156103e357600080fd5b8035906020019184600183028401116401000000008311171561040557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019064010000000081111561047257600080fd5b82018360208201111561048457600080fd5b803590602001918460018302840111640100000000831117156104a657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561050957600080fd5b82018360208201111561051b57600080fd5b8035906020019184600183028401116401000000008311171561053d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610a3c565b6040518082815260200191505060405180910390f35b60005481565b6001602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106675780601f1061063c57610100808354040283529160200191610667565b820191906000526020600020905b81548152906001019060200180831161064a57829003601f168201915b505050505090806002015490806003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561070b5780601f106106e05761010080835404028352916020019161070b565b820191906000526020600020905b8154815290600101906020018083116106ee57829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107a95780601f1061077e576101008083540402835291602001916107a9565b820191906000526020600020905b81548152906001019060200180831161078c57829003601f168201915b5050505050908060050154908060060154905087565b606080600060606000806107d1610cc6565b600160008981526020019081526020016000206040518060e001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108925780601f1061086757610100808354040283529160200191610892565b820191906000526020600020905b81548152906001019060200180831161087557829003601f168201915b5050505050815260200160028201548152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561093e5780601f106109135761010080835404028352916020019161093e565b820191906000526020600020905b81548152906001019060200180831161092157829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109e05780601f106109b5576101008083540402835291602001916109e0565b820191906000526020600020905b8154815290600101906020018083116109c357829003601f168201915b50505050508152602001600582015481526020016006820154815250509050806020015181608001518260a00151836060015184604001518560c001518595508494508292509650965096509650965096505091939550919395565b6000806000815480929190600101919050555060004290506040518060e001604052806000548152602001888152602001878152602001868152602001858152602001848152602001828152506001600080548152602001908152602001600020600082015181600001556020820151816001019080519060200190610ac3929190610d03565b50604082015181600201556060820151816003019080519060200190610aea929190610d03565b506080820151816004019080519060200190610b07929190610d03565b5060a0820151816005015560c082015181600601559050507f9a61f1367b1780e71167774bb5b4584769f8890bac5f2715f09bdd0a59b221576000548888888888876040518088815260200180602001878152602001806020018060200186815260200185815260200184810384528a818151815260200191508051906020019080838360005b83811015610ba9578082015181840152602081019050610b8e565b50505050905090810190601f168015610bd65780820380516001836020036101000a031916815260200191505b50848103835288818151815260200191508051906020019080838360005b83811015610c0f578082015181840152602081019050610bf4565b50505050905090810190601f168015610c3c5780820380516001836020036101000a031916815260200191505b50848103825287818151815260200191508051906020019080838360005b83811015610c75578082015181840152602081019050610c5a565b50505050905090810190601f168015610ca25780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390a160005491505095945050505050565b6040518060e00160405280600081526020016060815260200160008152602001606081526020016060815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610d4457805160ff1916838001178555610d72565b82800160010185558215610d72579182015b82811115610d71578251825591602001919060010190610d56565b5b509050610d7f9190610d83565b5090565b610da591905b80821115610da1576000816000905550600101610d89565b5090565b9056fea265627a7a723158200b0ec50e80f0a7a6055f356b87c74a329c0d7adfc65357945398ead36cd557f764736f6c63430005100032";

let deploy_contract = new web3.eth.Contract(abi);
let account = "0x29c8A56Ca7fe79401Aa830B406F3aa2Cd92C6eFF";

let payload = {
  data: bytecode
};

let parameter = {
  from: account,
  gas: web3.utils.toHex(800000),
  gasPrice: web3.utils.toHex(web3.utils.toWei("30", "gwei"))
};

deploy_contract
  .deploy(payload)
  .send(parameter, (err, transactionHash) => {
    console.log("Transaction Hash :", transactionHash);
  })
  .on("confirmation", () => {})
  .then(newContractInstance => {
    console.log(
      "Deployed Contract Address : ",
      newContractInstance.options.address
    );
  });
